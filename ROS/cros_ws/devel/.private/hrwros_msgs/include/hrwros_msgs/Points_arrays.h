// Generated by gencpp from file hrwros_msgs/Points_arrays.msg
// DO NOT EDIT!


#ifndef HRWROS_MSGS_MESSAGE_POINTS_ARRAYS_H
#define HRWROS_MSGS_MESSAGE_POINTS_ARRAYS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hrwros_msgs
{
template <class ContainerAllocator>
struct Points_arrays_
{
  typedef Points_arrays_<ContainerAllocator> Type;

  Points_arrays_()
    : x_coordinates()
    , y_coordinates()  {
    }
  Points_arrays_(const ContainerAllocator& _alloc)
    : x_coordinates(_alloc)
    , y_coordinates(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _x_coordinates_type;
  _x_coordinates_type x_coordinates;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _y_coordinates_type;
  _y_coordinates_type y_coordinates;





  typedef boost::shared_ptr< ::hrwros_msgs::Points_arrays_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrwros_msgs::Points_arrays_<ContainerAllocator> const> ConstPtr;

}; // struct Points_arrays_

typedef ::hrwros_msgs::Points_arrays_<std::allocator<void> > Points_arrays;

typedef boost::shared_ptr< ::hrwros_msgs::Points_arrays > Points_arraysPtr;
typedef boost::shared_ptr< ::hrwros_msgs::Points_arrays const> Points_arraysConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hrwros_msgs::Points_arrays_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hrwros_msgs::Points_arrays_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hrwros_msgs::Points_arrays_<ContainerAllocator1> & lhs, const ::hrwros_msgs::Points_arrays_<ContainerAllocator2> & rhs)
{
  return lhs.x_coordinates == rhs.x_coordinates &&
    lhs.y_coordinates == rhs.y_coordinates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hrwros_msgs::Points_arrays_<ContainerAllocator1> & lhs, const ::hrwros_msgs::Points_arrays_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hrwros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hrwros_msgs::Points_arrays_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hrwros_msgs::Points_arrays_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrwros_msgs::Points_arrays_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrwros_msgs::Points_arrays_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrwros_msgs::Points_arrays_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrwros_msgs::Points_arrays_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hrwros_msgs::Points_arrays_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b76707f47a52d893eafcf2404ef94bc";
  }

  static const char* value(const ::hrwros_msgs::Points_arrays_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b76707f47a52d89ULL;
  static const uint64_t static_value2 = 0x3eafcf2404ef94bcULL;
};

template<class ContainerAllocator>
struct DataType< ::hrwros_msgs::Points_arrays_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hrwros_msgs/Points_arrays";
  }

  static const char* value(const ::hrwros_msgs::Points_arrays_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hrwros_msgs::Points_arrays_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] x_coordinates\n"
"uint8[] y_coordinates\n"
;
  }

  static const char* value(const ::hrwros_msgs::Points_arrays_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hrwros_msgs::Points_arrays_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_coordinates);
      stream.next(m.y_coordinates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Points_arrays_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hrwros_msgs::Points_arrays_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hrwros_msgs::Points_arrays_<ContainerAllocator>& v)
  {
    s << indent << "x_coordinates[]" << std::endl;
    for (size_t i = 0; i < v.x_coordinates.size(); ++i)
    {
      s << indent << "  x_coordinates[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.x_coordinates[i]);
    }
    s << indent << "y_coordinates[]" << std::endl;
    for (size_t i = 0; i < v.y_coordinates.size(); ++i)
    {
      s << indent << "  y_coordinates[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.y_coordinates[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRWROS_MSGS_MESSAGE_POINTS_ARRAYS_H
